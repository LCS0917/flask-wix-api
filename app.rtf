{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 from flask import Flask, request, jsonify\
import openai\
import pandas as pd\
from datetime import datetime, timedelta\
\
app = Flask(__name__)\
openai.api_key = "your_openai_api_key"\
\
def extract_key_messages(file_content):\
    """Extract key messages and themes from the positioning strategy document"""\
    prompt = f"Analyze the following document and extract the key messages, tone, and themes:\\n\\n\{file_content\}"\
    \
    response = openai.ChatCompletion.create(\
        model="gpt-4",\
        messages=[\{"role": "system", "content": "You are an AI marketing strategist."\},\
                  \{"role": "user", "content": prompt\}]\
    )\
    \
    return response['choices'][0]['message']['content']\
\
def generate_content_ideas(key_messages, audience, content_types):\
    """Generate content ideas based on extracted themes and content types"""\
    prompt = f"Generate content ideas for \{audience\} based on these key messages: \{key_messages\}. The content types should include: \{', '.join(content_types)\}."\
    \
    response = openai.ChatCompletion.create(\
        model="gpt-4",\
        messages=[\{"role": "user", "content": prompt\}]\
    )\
    \
    return response['choices'][0]['message']['content']\
\
def generate_posting_schedule(start_date, num_days, content_ideas):\
    """Generate an optimal posting schedule"""\
    schedule = []\
    current_date = datetime.strptime(start_date, "%Y-%m-%d")\
\
    for i in range(num_days):\
        schedule.append(\{\
            "Date": current_date.strftime("%Y-%m-%d"),\
            "Content Idea": content_ideas[i % len(content_ideas)]\
        \})\
        current_date += timedelta(days=1)\
\
    return schedule\
\
@app.route('/generate-calendar', methods=['POST'])\
def generate_calendar():\
    data = request.json\
    start_date = data.get("start_date", datetime.today().strftime("%Y-%m-%d"))\
    audience = data.get("audience", "general audience")\
    content_types = data.get("content_types", ["Blog Post", "Social Media Post"])\
    file_content = data.get("file_content", "")\
\
    key_messages = extract_key_messages(file_content)\
    content_ideas = generate_content_ideas(key_messages, audience, content_types)\
    schedule = generate_posting_schedule(start_date, 7, content_ideas.split("\\n"))\
\
    return jsonify(\{"schedule": schedule, "content_ideas": content_ideas\})\
\
if __name__ == '__main__':\
    app.run(host='0.0.0.0', port=5000)\
}